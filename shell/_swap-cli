#compdef swap-cli

autoload -U is-at-least

_swap-cli() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
":: :_swap-cli_commands" \
"*::: :->swap-cli" \
&& ret=0
    case $state in
    (swap-cli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swap-cli-command-$line[1]:"
        case $line[1] in
            (listen)
_arguments "${_arguments_options[@]}" \
'-i+[IPv4 or IPv6 address to bind to]' \
'--ip=[IPv4 or IPv6 address to bind to]' \
'-p+[Port to use; defaults to the native LN port]' \
'--port=[Port to use; defaults to the native LN port]' \
'-o+[Use overlay protocol (http, websocket etc)]' \
'--overlay=[Use overlay protocol (http, websocket etc)]' \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
(connect)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
':peer -- Address of the remote node, in '<public_key>@<ipv4>|<ipv6>|<onionv2>|<onionv3>\[\:<port>\]' format:' \
&& ret=0
;;
(ping)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
':peer -- Address of the remote node, in '<public_key>@<ipv4>|<ipv6>|<onionv2>|<onionv3>\[\:<port>\]' format:' \
&& ret=0
;;
(info)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'::subject -- Remote peer address or temporary/permanent/short channel id. If absent, returns information about the node itself:' \
&& ret=0
;;
(peers)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
(ls)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
(make)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
':arbitrating-addr -- Bitcoin address used as destination or refund address:' \
':accordant-addr -- Monero address used as destination or refund address:' \
'::network -- Network to use:(Testnet Mainnet Local)' \
'::arbitrating-blockchain -- The chosen arbitrating blockchain:(ECDSA)' \
'::accordant-blockchain -- The chosen accordant blockchain:(Monero)' \
'::arbitrating-amount -- Amount of arbitrating assets to exchanged:' \
'::accordant-amount -- Amount of accordant assets to exchanged:' \
'::maker-role -- The future maker swap role:(Alice Bob)' \
'::cancel-timelock -- The cancel timelock parameter of the arbitrating blockchain:' \
'::punish-timelock -- The punish timelock parameter of the arbitrating blockchain:' \
'::fee-strategy -- The chosen fee strategy for the arbitrating transactions:' \
'::public-ip-addr -- public IPv4 or IPv6 address for public offer:' \
'::bind-ip-addr -- IPv4 or IPv6 address to bind to:' \
'::port -- Port to use; defaults to the native LN port:' \
'::overlay -- Use overlay protocol (http, websocket etc):' \
&& ret=0
;;
(take)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-w[Accept Offer without validation]' \
'--without-validation[Accept Offer without validation]' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
':bitcoin-address -- bitcoin address used as destination or refund address:' \
':monero-address -- monero address used as destination or refund address:' \
':public-offer -- Hex encoded offer:' \
&& ret=0
;;
(progress)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
':swapid -- SwapId:' \
&& ret=0
;;
(needs-funding)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
':coin:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_swap-cli_commands] )) ||
_swap-cli_commands() {
    local commands; commands=(
'listen:Bind to a socket and start listening for incoming LN peer connections, Maker'\''s action' \
'connect:Connect to the remote lightning network peer' \
'ping:Ping remote peer (must be already connected)' \
'info:General information about the running node' \
'peers:Lists existing peer connections' \
'ls:Lists running swaps' \
'make:Maker creates offer and start listening. Command used to to print a hex representation of the offer that shall be shared with Taker. Additionally it spins up the listener awaiting for connection related to this offer. Example usage: `make tb1q4gj53tuew3e6u4a32kdtle2q72su8te39dpceq 55LTR8KniP4LQGJSPtbYDacR7dz8RBFnsfAKMaMuwUNYX6aQbBcovzDPyrQF9KXF9tVU6Xk3K8no1BywnJX6GvZX8yJsXvt Testnet ECDSA Monero "0.00001350 BTC" "0.001 XMR" Alice 10 30 "1 satoshi/vByte" "127.0.0.1" "0.0.0.0" 9745`' \
'take:Taker accepts offer and connects to Maker'\''s daemon' \
'progress:Swap progress report' \
'needs-funding:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swap-cli commands' commands "$@"
}
(( $+functions[_swap-cli__connect_commands] )) ||
_swap-cli__connect_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli connect commands' commands "$@"
}
(( $+functions[_swap-cli__help_commands] )) ||
_swap-cli__help_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli help commands' commands "$@"
}
(( $+functions[_swap-cli__info_commands] )) ||
_swap-cli__info_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli info commands' commands "$@"
}
(( $+functions[_swap-cli__listen_commands] )) ||
_swap-cli__listen_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli listen commands' commands "$@"
}
(( $+functions[_swap-cli__ls_commands] )) ||
_swap-cli__ls_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli ls commands' commands "$@"
}
(( $+functions[_swap-cli__make_commands] )) ||
_swap-cli__make_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli make commands' commands "$@"
}
(( $+functions[_swap-cli__needs-funding_commands] )) ||
_swap-cli__needs-funding_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli needs-funding commands' commands "$@"
}
(( $+functions[_swap-cli__peers_commands] )) ||
_swap-cli__peers_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli peers commands' commands "$@"
}
(( $+functions[_swap-cli__ping_commands] )) ||
_swap-cli__ping_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli ping commands' commands "$@"
}
(( $+functions[_swap-cli__progress_commands] )) ||
_swap-cli__progress_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli progress commands' commands "$@"
}
(( $+functions[_swap-cli__take_commands] )) ||
_swap-cli__take_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli take commands' commands "$@"
}

_swap-cli "$@"
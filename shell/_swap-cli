#compdef swap-cli

autoload -U is-at-least

_swap-cli() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
":: :_swap-cli_commands" \
"*::: :->swap-cli" \
&& ret=0
    case $state in
    (swap-cli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swap-cli-command-$line[1]:"
        case $line[1] in
            (info)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'::subject -- Remote peer address or temporary/permanent/short channel id. If absent, returns information about the node itself:' \
&& ret=0
;;
(peers)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
(ls)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
(make)
_arguments "${_arguments_options[@]}" \
'--btc-addr=[Bitcoin address used as destination or refund address]' \
'--xmr-addr=[Monero address used as destination or refund address]' \
'-n+[Network to use to execute the swap between the chosen blockchains]: :(Testnet Mainnet Local)' \
'--network=[Network to use to execute the swap between the chosen blockchains]: :(Testnet Mainnet Local)' \
'--arb-blockchain=[The chosen arbitrating blockchain]: :(ECDSA)' \
'--acc-blockchain=[The chosen accordant blockchain]: :(Monero)' \
'--btc-amount=[Amount of arbitrating assets to exchanged]' \
'--xmr-amount=[Amount of accordant assets to exchanged]' \
'-r+[The future maker swap role, either Alice of Bob. This will dictate with asset will be exchanged for which asset. Alice will sell accordant assets for arbitrating ones and Bob the inverse, sell arbitrating assets for accordant ones]: :(Alice Bob)' \
'--maker-role=[The future maker swap role, either Alice of Bob. This will dictate with asset will be exchanged for which asset. Alice will sell accordant assets for arbitrating ones and Bob the inverse, sell arbitrating assets for accordant ones]: :(Alice Bob)' \
'--cancel-timelock=[The cancel timelock parameter of the arbitrating blockchain]' \
'--punish-timelock=[The punish timelock parameter of the arbitrating blockchain]' \
'--fee-strategy=[The chosen fee strategy for the arbitrating transactions]' \
'-I+[Public IPv4 or IPv6 address present in the public offer allowing taker to connect]' \
'--public-ip-addr=[Public IPv4 or IPv6 address present in the public offer allowing taker to connect]' \
'-b+[IPv4 or IPv6 address to bind to, listening for takers]' \
'--bind-ip-addr=[IPv4 or IPv6 address to bind to, listening for takers]' \
'-p+[Port to use; defaults to the native LN port]' \
'--port=[Port to use; defaults to the native LN port]' \
'--overlay=[Use overlay protocol (http, websocket etc)]' \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
(take)
_arguments "${_arguments_options[@]}" \
'--btc-addr=[Bitcoin address used as destination or refund address]' \
'--xmr-addr=[Monero address used as destination or refund address]' \
'-o+[An encoded public offer]' \
'--offer=[An encoded public offer]' \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-w[Accept the public offer without validation]' \
'--without-validation[Accept the public offer without validation]' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
(progress)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
':swapid -- The swap id requested:' \
&& ret=0
;;
(needs-funding)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
':coin:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-m+[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'--msg-socket=[ZMQ socket name/address to forward all incoming protocol messages]: :_files' \
'-x+[ZMQ socket name/address for daemon control interface]: :_files' \
'--ctl-socket=[ZMQ socket name/address for daemon control interface]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_swap-cli_commands] )) ||
_swap-cli_commands() {
    local commands; commands=(
'info:General information about the running node' \
'peers:Lists existing peer connections' \
'ls:Lists running swaps' \
'make:Maker creates offer and start listening for incoming connections. Command used to to print the resulting public offer that shall be shared with Taker. Additionally it spins up the listener awaiting for connection related to this offer' \
'take:Taker accepts offer and connects to maker'\''s daemon to start the trade' \
'progress:Request swap progress report' \
'needs-funding:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swap-cli commands' commands "$@"
}
(( $+functions[_swap-cli__help_commands] )) ||
_swap-cli__help_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli help commands' commands "$@"
}
(( $+functions[_swap-cli__info_commands] )) ||
_swap-cli__info_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli info commands' commands "$@"
}
(( $+functions[_swap-cli__ls_commands] )) ||
_swap-cli__ls_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli ls commands' commands "$@"
}
(( $+functions[_swap-cli__make_commands] )) ||
_swap-cli__make_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli make commands' commands "$@"
}
(( $+functions[_swap-cli__needs-funding_commands] )) ||
_swap-cli__needs-funding_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli needs-funding commands' commands "$@"
}
(( $+functions[_swap-cli__peers_commands] )) ||
_swap-cli__peers_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli peers commands' commands "$@"
}
(( $+functions[_swap-cli__progress_commands] )) ||
_swap-cli__progress_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli progress commands' commands "$@"
}
(( $+functions[_swap-cli__take_commands] )) ||
_swap-cli__take_commands() {
    local commands; commands=()
    _describe -t commands 'swap-cli take commands' commands "$@"
}

_swap-cli "$@"
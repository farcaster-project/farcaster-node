title Farcaster node
// to display the diagram, go to sequencediagram.org
// dashed lines, not yet implemented

participant t_syncer
participant t_wallet
participant t_swap
participant t_checkpoint
participant t_farcasterd
participant t_cli
participant peerd
participant m_cli
participant m_farcasterd
participant m_checkpoint
participant m_swap
participant m_wallet
participant m_syncer

==Setup and Commit-Reveal: Bob and Alice can be on both sides==
m_farcasterd -> m_farcasterd : launch farcasterd\nmanually
m_farcasterd -> m_farcasterd : launch walletd
m_farcasterd <- m_wallet : Ctl Hello
m_cli -> m_farcasterd : MakeOffer (deferred)
m_farcasterd -> m_wallet : Ctl GetKeys
m_farcasterd <- m_wallet : Ctl Keys (not to be held on state)
m_farcasterd -> m_farcasterd : MakeOffer (continues)
m_farcasterd -> m_farcasterd : launch\npeerd listen
t_farcasterd -> t_farcasterd : launch farcasterd\nmanually
t_farcasterd -> t_farcasterd : launch walletd
t_wallet -> t_farcasterd : Ctl Hello
t_cli -> t_farcasterd : Ctl TakeOffer (deferred)
t_wallet <- t_farcasterd : Ctl GetKeys
t_wallet -> t_farcasterd : Ctl Keys (not to be held on state)
t_farcasterd <- t_farcasterd : Ctl TakeOffer (continues)
t_farcasterd -> t_farcasterd : launch\npeerd connect
t_wallet <- t_farcasterd : Ctl TakeOffer
t_wallet -> t_wallet : create taker wallet
t_wallet -> t_farcasterd : Ctl LaunchSwap
t_swap -> t_farcasterd : Ctl Hello
t_swap -> t_wallet : Ctl Hello
t_farcasterd -> t_farcasterd:launch syncer
t_swap <- t_farcasterd : Ctl TakeSwap
t_syncer<-t_swap:If Bob, Ctl EstimateFee (btc)
t_swap -> peerd : Msg TakerCommit
peerd -> m_farcasterd : Msg TakerCommit
m_farcasterd -> m_wallet : Ctl BitcoinAddress
m_farcasterd -> m_wallet : Msg TakerCommit
m_wallet -> m_wallet : create maker wallet
m_wallet -> m_farcasterd : Ctl LaunchSwap
m_swap -> m_farcasterd : Ctl Hello
m_swap -> m_wallet : Ctl Hello
m_farcasterd -> m_farcasterd:launch syncer
m_farcasterd -> m_swap : Ctl MakeSwap

m_swap->m_syncer:If Bob, Ctl EstimateFee (btc)
m_swap -> peerd : Msg MakerCommit
t_swap <- peerd : Msg MakerCommit
// TODO: verify that swapd launches no matter what
t_syncer <- t_swap : Ctl WatchHeight
t_syncer <- t_swap : if Bob, Watch Arbitrating Funding Address
t_swap -> t_wallet : Msg MakerCommit
t_wallet -> t_swap : Ctl RevealProof (taker is sender)
t_swap -> peerd : Msg RevealProof (taker is sender)
t_swap -> peerd : Msg Reveal (taker is sender)
peerd -> m_swap : Msg RevealProof (taker is sender)
m_swap -> m_wallet : if Alice, Msg RevealProof (taker is sender) 
m_swap -> m_swap : if Bob, ADD PENDING Msg RevealProof
peerd -> m_swap : Msg Reveal (taker is sender)
m_swap -> m_farcasterd : if Bob, ask for funding
m_swap -> m_swap : if Bob, ADD PENDING Msg Reveal
m_swap -> m_wallet : if Alice, Msg Reveal (taker is sender)

m_swap->m_syncer:Ctl WatchHeight
m_swap -> m_syncer:if Bob, Watch Arbitrating Funding Address
m_swap <- m_syncer:If Bob, Arbitrating Funding event
m_swap->m_wallet:if Bob, Ctl Tx::Funding
m_swap<-m_wallet:If Bob, Ctl FundingUpdated
m_swap -> m_wallet : if Bob, SEND PENDING Msg RevealProof (taker is sender) 
m_swap -> m_wallet : if Bob, SEND PENDING Msg Reveal (taker is sender)
m_wallet -> m_swap : Ctl RevealProof (maker is sender)
peerd <- m_swap : Msg RevealProof (maker is sender)
peerd <- m_swap : Msg Reveal (maker is sender)
peerd -> t_swap : Msg RevealProof (maker is sender)
t_swap -> t_wallet : if Alice, Msg RevealProof (maker is sender)
t_swap -> t_swap : if Bob, ADD PENDING Msg RevealProof
peerd -> t_swap : Msg Reveal (maker is sender)
t_swap -> t_farcasterd : if Bob, ask for funding
t_swap -> t_swap : if Bob, ADD PENDING Msg Reveal
t_swap -> t_wallet : if Alice, Msg Reveal (maker is sender)
t_syncer -> t_swap:If Bob, Arbitrating Funding event
t_swap->t_wallet:if Bob, Ctl Tx::Funding
t_swap<-t_wallet:If Bob, Ctl FundingUpdated
t_swap -> t_wallet : if Bob, SEND PENDING Msg RevealProof (maker is sender)
t_swap -> t_wallet : if Bob, SEND PENDING Msg Reveal (maker is sender)
==Commit-Reveal Complete==
==Changing semantics: On Commit-Reveal, Maker and Taker were the key roles. From now on Bob or Alice are the key roles. Now t_ is bob_ on the left and m_ is alice_ on the right.==
==Swap setup: Bob is left, Alice right==
t_wallet -> t_checkpoint: Ctl CheckpointWalletBobPrelockBob
t_wallet -> t_swap : Ctl CoreArbitratingSetup
t_swap -> t_checkpoint: Ctl CheckpointSwapBobPrelockBob
// TODO: During replay of CheckpointSwapBobPrelockBob, Bob has to rewatch these 3 txs
t_syncer <- t_swap : Watch Arbitrating Lock
t_syncer <- t_swap : Watch Cancel
t_syncer <- t_swap : Watch Refund
peerd <- t_swap : Msg CoreArbitratingSetup
m_swap <- peerd : Msg CoreArbitratingSetup
m_swap -> m_syncer : Watch Arbitrating Lock
// TODO: During replay of CheckpointWalletAlicePrelockBob, Alice has to rewatch these 2 txs (arbitrating already final then)
m_swap -> m_syncer : Watch Cancel
m_swap -> m_syncer : Watch Refund

m_wallet <- m_swap : Msg CoreArbitratingSetup
m_wallet -> m_checkpoint : Ctl CheckpointWalletAlicePrelockBob
m_wallet -> m_swap : Ctl RefundProcedureSignatures
m_swap -> m_checkpoint : Ctl CheckpointSwapAlicePrelockBob
m_swap -> peerd : Msg RefundProcedureSignatures
peerd -> t_swap : Msg RefundProcedureSignatures
t_wallet <- t_swap : Msg RefundProcedureSignatures
t_wallet -> t_swap:Ctl Datum::SignedArbitratingLock
// DONE: do we know that same inputs are being used in case of replay?
// -> yes, but create different sig
t_wallet -> t_checkpoint : Ctl CheckpointWalletBobPreBuySig
t_wallet -> t_swap : Ctl Tx::Lock
t_swap -> t_syncer: Ctl Broadcast Arbitrating Lock
t_swap -> t_syncer : Watch Accordant Lock
t_wallet -> t_swap: Ctl Tx::Cancel
t_wallet -> t_swap: Ctl Tx::Refund
t_wallet -> t_swap : Ctl BuyProcedureSignature
t_swap -> t_checkpoint : Ctl CheckpointSwapBobPreBuySig
t_swap -> t_syncer : Watch Buy

parallel
t_syncer ->  t_swap : Arbitrating Lock final
// TODO: maybe instead of checkpointing earlier, reach this stage via a message from walletd in lieu of the syncer
m_swap <- m_syncer : Arbitrating Lock final
parallel off

m_swap -> m_syncer : Watch Accordant Lock

parallel
m_swap <- m_syncer : Accordant Lock final
t_swap <- t_syncer : Accordant Lock final
parallel off

peerd <- t_swap : Msg BuyProcedureSignature
m_swap <- peerd : Msg BuyProcedureSignature
m_swap -> m_checkpoint : Ctl CheckpointSwapAlicePreBuy
m_swap -> m_syncer:Watch Buy
m_swap -> m_wallet : Msg BuyProcedureSignature
m_wallet -> m_checkpoint : Ctl CheckpointWalletAlicePreBuy
==Swap Setup Complete==
==Buy Procedure: Bob is left, Alice right==

m_swap <- m_wallet : Fully signed buy
m_swap -> m_syncer : Broadcast buy
parallel
m_swap <- m_syncer : Event: buy seen on mempool
t_swap <- t_syncer : Event: buy seen on mempool
parallel off
t_wallet <- t_swap : Ctl Buy signature
t_wallet -> t_wallet : recover accordant keys

==Cancel Init t > t0: Bob is left, Alice right, either have a fully signed and valid cancel tx, and can publish==
parallel
t_swap <- t_syncer : Ctl Cancel valid
m_swap <- m_syncer : Ctl Cancel valid
parallel off
parallel
m_swap -> m_syncer : Broadcast cancel (Alice inits)
t_swap -> t_syncer : Broadcast cancel (Bob inits)
parallel off
==Cancel detected t > t0: Bob is left, Alice right==
t_swap <- t_syncer: Event cancel final
t_swap -> t_syncer : Broadcast refund
parallel
t_syncer -> t_swap : Event: refund seen
m_syncer -> m_swap : Event: refund seen
parallel off
m_swap -> m_wallet : Ctl Tx::Refund tx
m_wallet -> m_wallet : recover accordant keys

== Punish process t > t1 > t0 ==
// TODO: none of this is true except last step
m_swap<-m_syncer:Ctl Event: punish valid
m_swap->m_wallet:Ctl Event: punish valid
m_wallet->m_wallet:fully sign punish
// TODO: in the code, this actually already happens after CoreArbitratingSetup - think about this and move either this or that
m_swap<-m_wallet:Ctl Tx::Punish
m_swap->m_syncer:Ctl Broadcast punish tx

[package]
name = "farcaster_node"
description = "Farcaster node"
version = "0.0.2"
authors = ["Farcaster devs", "Dr. Maxim Orlovsky <orlovsky@pandoracore.com>"]
license = "MIT"
keywords = ["bitcoin", "monero", "node", "atomic swaps" ]
edition = "2018"
readme = "README.md"
build = "build.rs"
exclude = [".github", "/test", "Dockerfile"]

[lib]
name = "farcaster_node"

[[bin]]
name = "farcasterd"
required-features = ["server"]

[[bin]]
name = "peerd"
required-features = ["server"]

[[bin]]
name = "swapd"
required-features = ["server"]

[[bin]]
name = "swap-cli"
required-features = ["cli"]

[[bin]]
name = "walletd"
required-features = ["server"]

[[bin]]
name = "syncerd"
required-features = ["server"]

[dependencies]
# Farcaster crates
# farcaster_core = { path = "../farcaster-core", features = ["serde"] }
farcaster_core = { git = "https://github.com/farcaster-project/farcaster-core", branch = "main", features = ["serde"] }

hex = "^0.4.3"
anyhow = "1"

# LNP/BP crates
amplify = "3"
amplify_derive = "2"
lightning_encoding = "0.5.0-beta.3"
lnpbp = {version = "0.5.0-beta.3", features = ["all"]}
slip132 = "0.3"
# lnp-core =  { path = "../ext/lnp-core" }
# internet2 = { path = "../ext/rust-internet2" }
lnp-core = "0.4.0-beta.3"
strict_encoding = "1.7.4"
strict_encoding_derive = "1.7.4"
internet2 = "0.5.0-alpha.2"
bitcoin = "0.27"
monero = "0.15"
# Rust language
lazy_static = "1.4"
chrono = "0.4"
nix = { version = "0.19", optional = true }
regex = { version = "1.5", optional = true }
# Serialization & parsing
serde_crate = { package = "serde", version = "1", features = ["derive"], optional = true }
serde_with = { version = "1.8", optional = true }
serde_json = { version = "1", optional = true }
serde_yaml = { version = "0.8", optional = true }
sysinfo = { version = "0.18.2" }
toml = { version = "0.5", optional = true }
bech32 = { version = "0.7", optional = true }
base64 = { version = "0.12", optional = true }
# Congig & logging
log = { version = "0.4", features = ["max_level_trace", "release_max_level_debug"] }
env_logger = "0.7"
clap = { version = "3.0.0-beta.4", optional = true }
settings = { version = "0.10", package = "config", optional = true }
configure_me = { version = "0.4", optional = true }
dotenv = { version = "0.15", optional = true }
colored = { version = "2", optional = true }
shellexpand = { version = "2", optional = true }
# IPC
zmq = "0.9"
# Async
tokio = { version = "1.12.0", features = ["full"] }
# Coin clients
electrum-client = { git = "https://github.com/Lederstrumpf/rust-electrum-client", branch = "verboseTransactionGetRebased" }
bitcoincore-rpc = "0.14.0"
monero-rpc = { git = "https://github.com/TheCharlatan/monero-rpc-rs", branch = "changes" }
# monero-rpc = { path = "../monero-rpc-rs/" }

[build-dependencies]
# farcaster_core = { path = "../farcaster-core", features = ["serde"]}
farcaster_core = { git = "https://github.com/farcaster-project/farcaster-core", branch = "main", features = ["serde"] }
anyhow = "1"
serde_yaml = { version = "0.8", optional = true }
toml = { version = "0.5", optional = true }

amplify = "3"
amplify_derive = "2"
lnpbp = { version = "0.5.0-beta.3", features = ["all"] }
lightning_encoding = "0.5.0-beta.3"
# Bitcoin
bitcoin = "0.27"
# Monero
monero = "0.15"
# lnp-core =  { path = "../ext/lnp-core" }
# internet2 = { path = "../ext/rust-internet2" }
lnp-core = "0.4.0-beta.3"
strict_encoding = "=1.7.4"
strict_encoding_derive = "=1.7.4"
internet2 = "0.5.0-alpha.2"
lazy_static = "1.4"
clap = "3.0.0-beta.4"
clap_generate = "3.0.0-beta.4"
log = { version = "0.4", features = ["max_level_trace", "release_max_level_debug"] }
shellexpand = "2"
configure_me_codegen = "0.4"
electrum-client = { git = "https://github.com/Lederstrumpf/rust-electrum-client", branch = "verboseTransactionGetRebased" }

[dependencies.microservices]
# path = '../ext/rust-internet2'
name = "rust-internet2"
version = "0.5.0-alpha.1"
default-features = false
features = ['peer']

[build-dependencies.microservices]
# path = '../ext/rust-internet2'
name = "rust-internet2"
version = "0.5.0-alpha.1"
default-features = false
features = ['peer']

# Recommended set of features:
# 1. Standalone node: `server` (=`node`+`shell`)
# 2. Cli to remote node: `cli` (auto includes `shell` and `integration`)
# 3. Mobile app talking to a server: `client`
# 4. Mobile app with embedded node: `embedded` (auto includes `client` + `node`)
# 5. Simple cli utility app: `shell`
[features]
default = ["server", "cli"]
all = ["server", "cli", "serde", "tor"]

# Server is a standalone application that runs daemon
server = ["node", "shell", "microservices/server", "nix"]
# Command-line application feature
cli = ["shell", "client", "serde", "microservices/cli"]

# Embedded is an app that contains embedded node and that talks to it through
# integration layer
embedded = ["client", "node", "microservices/embedded"]
# Server node can be run as a part of mobile app and other types of clients;
# thus `server` != `node`.
# This feature results in building with features not required for command-line
node = ["serde", "internet2/keygen", "bitcoin/rand", "internet2/zmq", "microservices/node",
    "internet2/url", "base64",
    # Required for storing config and cache
    "_config", "_rpc"]
# Feature is required for any applications that talks to daemon processes
client = ["internet2/zmq", "microservices/client", "microservices/node", "bitcoin/rand",
    "base64",
    "internet2/url", "clap", "_rpc"]
# Required for all apps that can be launched from command-line shell as binaries
# (i.e. both servers and cli)
shell = [
    "dotenv", "clap", "settings", "configure_me", "serde",
    "amplify/parse_arg", "microservices/shell", "shellexpand", "colored"
]

# Internally used features for convenience
_config = ["serde_yaml", "toml"]
_rpc = []

serde = ["serde_crate", "serde_with", "serde_yaml", "serde_json", "toml",
    "chrono/serde", "bitcoin/use-serde", "slip132/serde",
    "amplify/serde", "internet2/serde", "microservices/serde",
    "lnpbp/serde", "lnp-core/serde" ]
tor = ["microservices/tor", "internet2/tor"]

integration_test = ["regex"]

[package.metadata.configure_me]
spec = "config_spec.toml"
